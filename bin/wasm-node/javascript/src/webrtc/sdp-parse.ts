// Smoldot
// Copyright (C) 2019-2022  Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

export type SdpBody =
    {
        type: 'media-section',
        media: string,
        port: number,
        proto: string,
        fmt: string,
        lines: string[],
    } | {
        type: 'misc-section',
        lines: string[],
    };

/**
 * Parses a SDP document and returns a decoded version.
 *
 * Note that this function's implementation makes the assumption that the SDP is valid and
 * reasonable. This is the case only in the context where we parse the SDP generated by the local
 * browser. Please do not copy this function with the intention to use it to parse untrusted
 * SDP.
 */
export function parseSdp(sdp: string): SdpBody[] {
    // The SDP format is defined in RFC8866 (https://datatracker.ietf.org/doc/html/rfc8866)

    // Will be filled with the final output.
    let output: SdpBody[] = [];
    // Section currently being filled
    let currentSection: SdpBody | null = null;

    // TODO: trimming isn't correct
    const sdpLines = sdp.trimEnd().split('\n').map(line => line.trimEnd());

    for (let lineIndex in sdpLines) {
        const sdpLine = sdpLines[lineIndex]!;
        const lineComponents = sdpLine.split('=', 2);
        if (lineComponents[0]! == 'm') {
            const mediaComponents = lineComponents[1]!.split(' ', 4);

            if (currentSection)
                output.push(currentSection);
            currentSection = {
                type: 'media-section',
                media: mediaComponents[0]!,
                port: Number(mediaComponents[1]!),
                proto: mediaComponents[2]!,
                fmt: mediaComponents[3]!,
                lines: [sdpLine]
            };
        } else if (currentSection) {
            currentSection.lines.push(sdpLine);
        } else {
            currentSection = { type: 'misc-section', lines: [sdpLine] };
        }
    }

    if (currentSection)
        output.push(currentSection);
    return output;
}
